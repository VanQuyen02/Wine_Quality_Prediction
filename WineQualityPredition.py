# -*- coding: utf-8 -*-
"""AIL302

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NTDrYRfcqwU1y6wp2EhNWAtj8-d1AHyE
"""

!pip install -q kaggle
!pip install --upgrade --force-reinstall --no-deps kaggle
from google.colab import files
files.upload() #import .JSON file
#Make directory named kaggle and copy kaggle.json file there.
!mkdir ~/.kaggle
!cp kaggle.json ~/.kaggle/
!ls ~/.kaggle
#Allocate the required permission for this file.
! chmod 600 ~/.kaggle/kaggle.json

!kaggle competitions download -c ail302m-fall22

!unzip ail302m-fall22.zip

import numpy as np
import pandas as pd
data = pd.read_csv('train.csv',sep=';')
data.describe()
# data.drop_duplicates(inplace=True)

!pip install feature-engine

from sklearn.pipeline import Pipeline


# import classes from Feature-engine
from feature_engine.creation import MathematicalCombination, CombineWithReferenceFeature

combinator = MathematicalCombination(
    variables_to_combine=['fixed acidity', 'volatile acidity'],
    math_operations = ['sum', 'mean'],
    new_variables_names = ['total_acidity', 'average_acidity']
)

data = combinator.fit_transform(data)

# let's combine salts into total minerals and average minerals

combinator = MathematicalCombination(
    variables_to_combine=['chlorides', 'sulphates'],
    math_operations = ['sum', 'mean'],
    new_variables_names = ['total_minerals', 'average_minerals']
)

data = combinator.fit_transform(data)

combinator = CombineWithReferenceFeature(
    variables_to_combine=['total sulfur dioxide'],
    reference_variables=['free sulfur dioxide'],
    operations=['sub'],
    new_variables_names=['non_free_sulfur_dioxide']
)

data = combinator.fit_transform(data)

combinator = CombineWithReferenceFeature(
    variables_to_combine=['free sulfur dioxide'],
    reference_variables=['total sulfur dioxide'],
    operations=['div'],
    new_variables_names=['percentage_free_sulfur']
)

data = combinator.fit_transform(data)

combinator = CombineWithReferenceFeature(
    variables_to_combine=['sulphates'],
    reference_variables=['free sulfur dioxide'],
    operations=['div'],
    new_variables_names=['percentage_salt_sulfur']
)

data = combinator.fit_transform(data)

data1 = data[data['type']=='red']
data1.drop('type',axis=1,inplace = True)
data2 = data[data['type']=='white']
data2.drop('type',axis=1,inplace = True)

fig, ax = plt.subplots(ncols=6, nrows=2, figsize=(15, 5))
ax = ax.flatten()
index=0
for i in data1.columns:
  if i != 'quality':
    sns.barplot(x='quality', y=i, data=data1, ax=ax[index])
    index+=1
plt.tight_layout(pad=0.4)
plt.show

fig, ax = plt.subplots(ncols=6, nrows=2, figsize=(15, 5))
ax = ax.flatten()
index = 0
for i in data2.columns:
  if i != 'quality':
    sns.boxplot(y=i, data=data2, ax=ax[index])
    index +=1
plt.tight_layout(pad=0.4)
plt.show()

fig, ax = plt.subplots(ncols=6, nrows=2, figsize=(15, 5))
ax = ax.flatten()
index=0
for i in data2.columns:
  if i != 'quality':
    sns.barplot(x='quality', y=i, data=data2, ax=ax[index])
    index+=1
plt.tight_layout(pad=0.4)
plt.show

import seaborn as sns
import matplotlib.pyplot as plt
plt.figure(figsize=(20,10))
sns.heatmap(data1.corr(),annot=True)

import seaborn as sns
import matplotlib.pyplot as plt
plt.figure(figsize=(10,5))
sns.heatmap(data2.corr(),annot=True)

X1 = data1.drop(['quality'],axis=1)
y1 = data1['quality']
X2 = data2.drop(['quality'],axis=1)
y2 = data2['quality']

y1.value_counts()

y2.value_counts()

!pip install imbalanced-learn

from imblearn.over_sampling import BorderlineSMOTE,SMOTE
# oversample = BorderlineSMOTE()
oversample = BorderlineSMOTE(random_state=0)

X1, y1 = oversample.fit_resample(X1, y1)
X2, y2 = oversample.fit_resample(X2, y2)

y1.value_counts()

y2.value_counts()

!pip install flaml
from sklearn.metrics import mean_absolute_percentage_error

from flaml import AutoML
automl1 = AutoML()
automl2 = AutoML()

automl1.fit(X1, y1, task="regression",metric='rmse',time_budget=600)

automl2.fit(X2, y2, task="regression",metric='rmse',time_budget=600)

from sklearn.ensemble import ExtraTreesRegressor
automl1 = ExtraTreesRegressor(max_features=0.4989697242405086, max_leaf_nodes=1056,
                    n_estimators=338, n_jobs=-1)
automl2 = ExtraTreesRegressor(max_features=0.6744393619339732, max_leaf_nodes=3116,
                    n_estimators=257, n_jobs=-1)
automl1.fit(X1,y1)
automl2.fit(X2,y2)

data3 = pd.read_csv('test.csv',sep=';')

combinator = MathematicalCombination(
    variables_to_combine=['fixed acidity', 'volatile acidity'],
    math_operations = ['sum', 'mean'],
    new_variables_names = ['total_acidity', 'average_acidity']
)

data3 = combinator.fit_transform(data3)

combinator = MathematicalCombination(
    variables_to_combine=['chlorides', 'sulphates'],
    math_operations = ['sum', 'mean'],
    new_variables_names = ['total_minerals', 'average_minerals']
)

data3 = combinator.fit_transform(data3)

combinator = CombineWithReferenceFeature(
    variables_to_combine=['total sulfur dioxide'],
    reference_variables=['free sulfur dioxide'],
    operations=['sub'],
    new_variables_names=['non_free_sulfur_dioxide']
)

data3 = combinator.fit_transform(data3)

combinator = CombineWithReferenceFeature(
    variables_to_combine=['free sulfur dioxide'],
    reference_variables=['total sulfur dioxide'],
    operations=['div'],
    new_variables_names=['percentage_free_sulfur']
)

data3 = combinator.fit_transform(data3)

combinator = CombineWithReferenceFeature(
    variables_to_combine=['sulphates'],
    reference_variables=['free sulfur dioxide'],
    operations=['div'],
    new_variables_names=['percentage_salt_sulfur']
)

data3 = combinator.fit_transform(data3)

data4 = data3[data3['type']=='red']
data4.drop('type',axis=1,inplace = True)
data5 = data3[data3['type']=='white']
data5.drop('type',axis=1,inplace = True)

id1 = data4['id']
id2 = data5['id']

X_t_1 = data4.drop(['id'],axis=1);
X_t_2 = data5.drop(['id'],axis=1);

pred1 = automl1.predict(X_t_1);
pred2 = automl2.predict(X_t_2);

for i in range(len(pred1)):
  if pred1[i]-int(pred1[i])>0.6:
    pred1[i]=int(pred1[i])+1

for i in range(len(pred2)):
  if pred2[i]-int(pred2[i])>0.6:
    pred2[i]=int(pred2[i])+1

submission1 = pd.DataFrame({"id":id1,"quality":pred1})
submission2 = pd.DataFrame({"id":id2,"quality":pred2})

submission = pd.concat([submission1,submission2])
submission

submission.to_csv("submission.csv",index=False)

!kaggle competitions submit -c ail302m-fall22 -f submission.csv -m "Message"